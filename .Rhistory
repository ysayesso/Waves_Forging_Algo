}
}
Mined_Blocks_AND_Node_Weight<-Mined_Blocks_AND_Node_Weight/37
bitmap("/Users/ayoubessourni/Desktop/WeightsOverMinedBlocks1.tiff", height = 4, width = 4, units = 'in', type="tifflzw", res=2400)
plot(Indice_Of_Node,Mined_Blocks_AND_Node_Weight, xlab = "Indice of Weight b", ylab = "Mined Blocks(f) and Node's Weight(g)",type = "l", col="red")
lines(Indice_Of_Node,B,col="green",lty=2)
legend("topright", legend=c("f: Node's Weights","g: Mined Blocks"),
col=c("red", "blue"), lty=1:2, cex=0.8)
dev.off()
par(mfrow = c(1,1))
bitmap("/Users/ayoubessourni/Desktop/WeightsOverMinedBlocks2.tiff", height = 4, width = 4, units = 'in', type="tifflzw", res=2400)
plot(B,Mined_Blocks_AND_Node_Weight, xlab = "Weight b", ylab = "Mined Blocks",type = "l", col="red")
#lines(Indice_Of_Node,B,col="green",lty=2)
legend("topleft", legend=c("Mined Blocks over there Weights"),
col=c("red"), lty=1:2, cex=0.8)
dev.off()
par(mfrow = c(1,1))
# Create the data for the chart.
# Create the data for the chart.
#Histo <- Result
# Create the data for the chart.
#Histo <- Result
#png(file = "/Users/ayoubessourni/Desktop/Signatures.png")
#this vector contains the balances of the hole network
#B <- runif(50, 10000.0, 10000000.0)
B<-c(16487422.17216726,10312169.84206757,4305307.87572907,4031770.77198099,2288358.60881004,2167626.99873483,1933929.89592037,948145.57650840,600125.22310064,520165.15518049,513285.70189458,390669.41885106,379237.11421437,358559.09103922,354218.35310903,334855.55185985,296593.62589238,283927.03330088,273452.94900842 ,254032.68993168,204209.22460590,200012.63860000,147477.24766700,134133.84636986,127783.71974378,119974.19040062,115884.40195930,113096.63989186,104054.63020069,103522.45083402,88684.23213461, 80002.08540000,79694.70581947,78217.37029927,73527.16160051,72106.39140112,63898.06985817,61741.96170504,61511.19180000,56774.32565027,50154.56762268,48875.79355104,45007.25880290,44924.27744538,42026.80047260,42020.32895777,34911.16513182,30012.54220015,28902.71348148,25152.56686099,24098.25965424,23261.47303225,22710.50613249,21773.00000000,18010.99860000,18006.80100208,15411.42096132,14316.95516560,13261.11671388,13003.24040000,10506.44480066,10229.69490867,10012.14075096,10003.09080000,9318.06220000,9223.21817245,8077.14843735,6758.34182461,6615.95514456,6370.77690890,6212.37238175,4973.65617341,4510.01880000,3500.06460000,3473.69284164, 3434.52954534,3309.55360105,2974.04020000,2963.37840000,2953.96274655,2504.81144754,2235.00520000,2030.05100000,1343.73569354,1012.00400000,7.72622186,1.24100011,0.44326236)
sum_B <- sum(B)
B<-B/sum_B
Indice_Of_Node <- seq(1, 88, 1)
#we sort the balances decreasingly, because it s very important for the security of the network
B<-sort(B, decreasing = TRUE)
#this is the max 256 bit number in base 16, we convert it into decimal number
V <- mpfr("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", base=16)
V<-format(as(V, "mpfr"), digits = NULL, drop0trailing = TRUE)
#K<-rep(0,373824)
Mined_Blocks_AND_Node_Weight<-rep(0,88)
#here we calcul the hash(n-1)/hash max
#for (i in 1:10000000) {
#  H[i]<-mpfr(digest(i, algo="sha256", serialize=TRUE), base=16)/V
# K[i]<-as.numeric(format(as(H[[i]], "mpfr"), digits = NULL, drop0trailing = TRUE))
#}
mydata = read.table("/Users/ayoubessourni/Documents/Waves_Forging_Algo/AllSignatures.txt")
for (i in 1:373824) {
#for (i in 1:37) {
K[i]<-as.numeric(format(as((mpfr(digest(mydata[[1]][i], algo="sha256", serialize=TRUE), base=16)/V), "mpfr"), digits = NULL, drop0trailing = TRUE))
print(i)
sum <- 0
for (j in 1:88) {
sum <- sum + B[j]
if(sum>K[i]){
Mined_Blocks_AND_Node_Weight[j] <- Mined_Blocks_AND_Node_Weight[j] + 1
break
}
}
}
library("digest", lib.loc="/usr/local/lib/R/3.4/site-library")
#this vector contains the balances of the hole network
#B <- runif(50, 10000.0, 10000000.0)
B<-c(16487422.17216726,10312169.84206757,4305307.87572907,4031770.77198099,2288358.60881004,2167626.99873483,1933929.89592037,948145.57650840,600125.22310064,520165.15518049,513285.70189458,390669.41885106,379237.11421437,358559.09103922,354218.35310903,334855.55185985,296593.62589238,283927.03330088,273452.94900842 ,254032.68993168,204209.22460590,200012.63860000,147477.24766700,134133.84636986,127783.71974378,119974.19040062,115884.40195930,113096.63989186,104054.63020069,103522.45083402,88684.23213461, 80002.08540000,79694.70581947,78217.37029927,73527.16160051,72106.39140112,63898.06985817,61741.96170504,61511.19180000,56774.32565027,50154.56762268,48875.79355104,45007.25880290,44924.27744538,42026.80047260,42020.32895777,34911.16513182,30012.54220015,28902.71348148,25152.56686099,24098.25965424,23261.47303225,22710.50613249,21773.00000000,18010.99860000,18006.80100208,15411.42096132,14316.95516560,13261.11671388,13003.24040000,10506.44480066,10229.69490867,10012.14075096,10003.09080000,9318.06220000,9223.21817245,8077.14843735,6758.34182461,6615.95514456,6370.77690890,6212.37238175,4973.65617341,4510.01880000,3500.06460000,3473.69284164, 3434.52954534,3309.55360105,2974.04020000,2963.37840000,2953.96274655,2504.81144754,2235.00520000,2030.05100000,1343.73569354,1012.00400000,7.72622186,1.24100011,0.44326236)
sum_B <- sum(B)
B<-B/sum_B
Indice_Of_Node <- seq(1, 88, 1)
#we sort the balances decreasingly, because it s very important for the security of the network
B<-sort(B, decreasing = TRUE)
#this is the max 256 bit number in base 16, we convert it into decimal number
V <- mpfr("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", base=16)
V<-format(as(V, "mpfr"), digits = NULL, drop0trailing = TRUE)
#K<-rep(0,373824)
Mined_Blocks_AND_Node_Weight<-rep(0,88)
#here we calcul the hash(n-1)/hash max
#for (i in 1:10000000) {
#  H[i]<-mpfr(digest(i, algo="sha256", serialize=TRUE), base=16)/V
# K[i]<-as.numeric(format(as(H[[i]], "mpfr"), digits = NULL, drop0trailing = TRUE))
#}
mydata = read.table("/Users/ayoubessourni/Documents/Waves_Forging_Algo/AllSignatures.txt")
#for (i in 1:373824) {
for (i in 1:37) {
K[i]<-as.numeric(format(as((mpfr(digest(mydata[[1]][i], algo="sha256", serialize=TRUE), base=16)/V), "mpfr"), digits = NULL, drop0trailing = TRUE))
print(i)
sum <- 0
for (j in 1:88) {
sum <- sum + B[j]
if(sum>K[i]){
Mined_Blocks_AND_Node_Weight[j] <- Mined_Blocks_AND_Node_Weight[j] + 1
break
}
}
}
Mined_Blocks_AND_Node_Weight<-Mined_Blocks_AND_Node_Weight/37
bitmap("/Users/ayoubessourni/Desktop/WeightsOverMinedBlocks1.tiff", height = 4, width = 4, units = 'in', type="tifflzw", res=2400)
plot(Indice_Of_Node,Mined_Blocks_AND_Node_Weight, xlab = "Indice of Weight b", ylab = "Mined Blocks(f) and Node's Weights(g)",type = "l", col="red")
lines(Indice_Of_Node,B,col="green",lty=2)
legend("topright", legend=c("f: Node's Weights","g: Mined Blocks"),
col=c("red", "blue"), lty=1:2, cex=0.8)
dev.off()
par(mfrow = c(1,1))
bitmap("/Users/ayoubessourni/Desktop/WeightsOverMinedBlocks2.tiff", height = 4, width = 4, units = 'in', type="tifflzw", res=2400)
plot(B,Mined_Blocks_AND_Node_Weight, xlab = "Weight b", ylab = "Mined Blocks",type = "l", col="red")
#lines(Indice_Of_Node,B,col="green",lty=2)
legend("topleft", legend=c("Mined Blocks over there Weights"),
col=c("red"), lty=1:2, cex=0.8)
dev.off()
par(mfrow = c(1,1))
# Create the data for the chart.
# Create the data for the chart.
#Histo <- Result
# Create the data for the chart.
#Histo <- Result
#png(file = "/Users/ayoubessourni/Desktop/Signatures.png")
# Create the data for the chart.
#Histo <- Result
#png(file = "/Users/ayoubessourni/Desktop/Signatures.png")
#barplot(Result, density = Result, names.arg = B)
# Create the data for the chart.
#Histo <- Result
#png(file = "/Users/ayoubessourni/Desktop/Signatures.png")
#barplot(Result, density = Result, names.arg = B)
#barplot(Result, names.arg = B)
#this vector contains the balances of the hole network
#B <- runif(50, 10000.0, 10000000.0)
B<-c(16487422.17216726,10312169.84206757,4305307.87572907,4031770.77198099,2288358.60881004,2167626.99873483,1933929.89592037,948145.57650840,600125.22310064,520165.15518049,513285.70189458,390669.41885106,379237.11421437,358559.09103922,354218.35310903,334855.55185985,296593.62589238,283927.03330088,273452.94900842 ,254032.68993168,204209.22460590,200012.63860000,147477.24766700,134133.84636986,127783.71974378,119974.19040062,115884.40195930,113096.63989186,104054.63020069,103522.45083402,88684.23213461, 80002.08540000,79694.70581947,78217.37029927,73527.16160051,72106.39140112,63898.06985817,61741.96170504,61511.19180000,56774.32565027,50154.56762268,48875.79355104,45007.25880290,44924.27744538,42026.80047260,42020.32895777,34911.16513182,30012.54220015,28902.71348148,25152.56686099,24098.25965424,23261.47303225,22710.50613249,21773.00000000,18010.99860000,18006.80100208,15411.42096132,14316.95516560,13261.11671388,13003.24040000,10506.44480066,10229.69490867,10012.14075096,10003.09080000,9318.06220000,9223.21817245,8077.14843735,6758.34182461,6615.95514456,6370.77690890,6212.37238175,4973.65617341,4510.01880000,3500.06460000,3473.69284164, 3434.52954534,3309.55360105,2974.04020000,2963.37840000,2953.96274655,2504.81144754,2235.00520000,2030.05100000,1343.73569354,1012.00400000,7.72622186,1.24100011,0.44326236)
sum_B <- sum(B)
B<-B/sum_B
Indice_Of_Node <- seq(1, 88, 1)
#we sort the balances decreasingly, because it s very important for the security of the network
B<-sort(B, decreasing = TRUE)
#this is the max 256 bit number in base 16, we convert it into decimal number
V <- mpfr("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", base=16)
V<-format(as(V, "mpfr"), digits = NULL, drop0trailing = TRUE)
#K<-rep(0,373824)
Mined_Blocks_AND_Node_Weight<-rep(0,88)
#here we calcul the hash(n-1)/hash max
#for (i in 1:10000000) {
#  H[i]<-mpfr(digest(i, algo="sha256", serialize=TRUE), base=16)/V
# K[i]<-as.numeric(format(as(H[[i]], "mpfr"), digits = NULL, drop0trailing = TRUE))
#}
mydata = read.table("/Users/ayoubessourni/Documents/Waves_Forging_Algo/AllSignatures.txt")
for (i in 1:373824) {
K[i]<-as.numeric(format(as((mpfr(digest(mydata[[1]][i], algo="sha256", serialize=TRUE), base=16)/V), "mpfr"), digits = NULL, drop0trailing = TRUE))
print(i)
sum <- 0
for (j in 1:88) {
sum <- sum + B[j]
if(sum>K[i]){
Mined_Blocks_AND_Node_Weight[j] <- Mined_Blocks_AND_Node_Weight[j] + 1
break
}
}
}
#this vector contains the balances of the hole network
#B <- runif(50, 10000.0, 10000000.0)
B<-c(16487422.17216726,10312169.84206757,4305307.87572907,4031770.77198099,2288358.60881004,2167626.99873483,1933929.89592037,948145.57650840,600125.22310064,520165.15518049,513285.70189458,390669.41885106,379237.11421437,358559.09103922,354218.35310903,334855.55185985,296593.62589238,283927.03330088,273452.94900842 ,254032.68993168,204209.22460590,200012.63860000,147477.24766700,134133.84636986,127783.71974378,119974.19040062,115884.40195930,113096.63989186,104054.63020069,103522.45083402,88684.23213461, 80002.08540000,79694.70581947,78217.37029927,73527.16160051,72106.39140112,63898.06985817,61741.96170504,61511.19180000,56774.32565027,50154.56762268,48875.79355104,45007.25880290,44924.27744538,42026.80047260,42020.32895777,34911.16513182,30012.54220015,28902.71348148,25152.56686099,24098.25965424,23261.47303225,22710.50613249,21773.00000000,18010.99860000,18006.80100208,15411.42096132,14316.95516560,13261.11671388,13003.24040000,10506.44480066,10229.69490867,10012.14075096,10003.09080000,9318.06220000,9223.21817245,8077.14843735,6758.34182461,6615.95514456,6370.77690890,6212.37238175,4973.65617341,4510.01880000,3500.06460000,3473.69284164, 3434.52954534,3309.55360105,2974.04020000,2963.37840000,2953.96274655,2504.81144754,2235.00520000,2030.05100000,1343.73569354,1012.00400000,7.72622186,1.24100011,0.44326236)
sum_B <- sum(B)
B<-B/sum_B
Indice_Of_Node <- seq(1, 88, 1)
#we sort the balances decreasingly, because it s very important for the security of the network
B<-sort(B, decreasing = TRUE)
#this is the max 256 bit number in base 16, we convert it into decimal number
V <- mpfr("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", base=16)
V<-format(as(V, "mpfr"), digits = NULL, drop0trailing = TRUE)
#K<-rep(0,373824)
Mined_Blocks_AND_Node_Weight<-rep(0,88)
#here we calcul the hash(n-1)/hash max
#for (i in 1:10000000) {
#  H[i]<-mpfr(digest(i, algo="sha256", serialize=TRUE), base=16)/V
# K[i]<-as.numeric(format(as(H[[i]], "mpfr"), digits = NULL, drop0trailing = TRUE))
#}
mydata = read.table("/Users/ayoubessourni/Documents/Waves_Forging_Algo/AllSignatures.txt")
for (i in 1:373824) {
K[i]<-as.numeric(format(as((mpfr(digest(mydata[[1]][i], algo="sha256", serialize=TRUE), base=16)/V), "mpfr"), digits = NULL, drop0trailing = TRUE))
print(i)
sum <- 0
for (j in 1:88) {
sum <- sum + B[j]
if(sum>K[i]){
Mined_Blocks_AND_Node_Weight[j] <- Mined_Blocks_AND_Node_Weight[j] + 1
break
}
}
}
Mined_Blocks_AND_Node_Weight<-Mined_Blocks_AND_Node_Weight/373824
bitmap("/Users/ayoubessourni/Desktop/WeightsOverMinedBlocks1.tiff", height = 4, width = 4, units = 'in', type="tifflzw", res=2400)
plot(Indice_Of_Node,Mined_Blocks_AND_Node_Weight, xlab = "Indice of Weight b", ylab = "Mined Blocks(f) and Node's Weights(g)",type = "l", col="red")
lines(Indice_Of_Node,B,col="green",lty=2)
legend("topright", legend=c("f: Node's Weights","g: Mined Blocks"),
col=c("red", "blue"), lty=1:2, cex=0.8)
dev.off()
par(mfrow = c(1,1))
bitmap("/Users/ayoubessourni/Desktop/WeightsOverMinedBlocks2.tiff", height = 4, width = 4, units = 'in', type="tifflzw", res=2400)
plot(B,Mined_Blocks_AND_Node_Weight, xlab = "Weight b", ylab = "Mined Blocks",type = "l", col="red")
#lines(Indice_Of_Node,B,col="green",lty=2)
legend("topleft", legend=c("Mined Blocks over there Weights"),
col=c("red"), lty=1:2, cex=0.8)
dev.off()
par(mfrow = c(1,1))
# Create the data for the chart.
# Create the data for the chart.
#Histo <- Result
# Create the data for the chart.
#Histo <- Result
#png(file = "/Users/ayoubessourni/Desktop/Signatures.png")
# Create the data for the chart.
#Histo <- Result
#png(file = "/Users/ayoubessourni/Desktop/Signatures.png")
#barplot(Result, density = Result, names.arg = B)
# Create the data for the chart.
#Histo <- Result
#png(file = "/Users/ayoubessourni/Desktop/Signatures.png")
#barplot(Result, density = Result, names.arg = B)
#barplot(Result, names.arg = B)
#this vector contains the balances of the hole network
#B <- runif(50, 10000.0, 10000000.0)
#B<-c(16487422.17216726,10312169.84206757,4305307.87572907,4031770.77198099,2288358.60881004,2167626.99873483,1933929.89592037,948145.57650840,600125.22310064,520165.15518049,513285.70189458,390669.41885106,379237.11421437,358559.09103922,354218.35310903,334855.55185985,296593.62589238,283927.03330088,273452.94900842 ,254032.68993168,204209.22460590,200012.63860000,147477.24766700,134133.84636986,127783.71974378,119974.19040062,115884.40195930,113096.63989186,104054.63020069,103522.45083402,88684.23213461, 80002.08540000,79694.70581947,78217.37029927,73527.16160051,72106.39140112,63898.06985817,61741.96170504,61511.19180000,56774.32565027,50154.56762268,48875.79355104,45007.25880290,44924.27744538,42026.80047260,42020.32895777,34911.16513182,30012.54220015,28902.71348148,25152.56686099,24098.25965424,23261.47303225,22710.50613249,21773.00000000,18010.99860000,18006.80100208,15411.42096132,14316.95516560,13261.11671388,13003.24040000,10506.44480066,10229.69490867,10012.14075096,10003.09080000,9318.06220000,9223.21817245,8077.14843735,6758.34182461,6615.95514456,6370.77690890,6212.37238175,4973.65617341,4510.01880000,3500.06460000,3473.69284164, 3434.52954534,3309.55360105,2974.04020000,2963.37840000,2953.96274655,2504.81144754,2235.00520000,2030.05100000,1343.73569354,1012.00400000,7.72622186,1.24100011,0.44326236)
B<-c(16527553.15927899, 10387289.28886790, 4362416.97479571, 4016715.27352834, 2312195.75577051, 2130585.86256782, 1830578.72434511, 955063.35481694, 601209.42217253, 513408.83634278, 379235.12398147, 371208.87309473, 332727.44043910, 308695.38134892, 284746.60296519, 278358.96401319, 271788.67939320, 259111.58064717, 250679.38114351, 203893.06055901, 146482.04330822, 134004.03052966, 127059.38534541, 121915.90980040, 113364.88704800, 112870.79187321, 104662.10826277, 100329.33167876 80181.78748702, 79474.20024176, 78139.41731552, 70357.43669308, 67115.43414925, 63892.56443558, 61511.20688128, 51376.32478983, 50263.58905283, 50154.44839533, 48856.86439316, 47165.12163987, 45007.29539684, 44168.56070771, 42014.34565158, 41100.02079390, 40890.02512578, 34893.97695438, 32424.62675660, 30012.58344201, 24635.01134514, 23387.14185752, 22111.46591738, 19927.28459818, 18007.78798257, 17081.66482021, 16208.72241557, 14311.50781454, 13307.20215927, 10498.59324712, 10229.87826565, 10035.48751437, 10003.19452229, 9884.09663392, 9278.25943086, 8871.83084595, 6774.75019777, 6617.86896883, 6161.16349678, 6140.95658656, 5087.82713190, 4809.67310919, 3350.05041905, 3025.74527706, 2619.80861207, 2344.43771261, 2306.16062486, 2071.39273127, 2038.54410650, 1992.71671716, 1840.18646640, 1802.31080674, 1693.83872075, 1623.70494116, 1572.08609828, 1465.01009673, 1157.47853361, 1097.72218970, 1067.28335409, 1027.98399682, 1001.00642790, 971.38556972, 935.68007703, 819.14636032, 807.49773704, 735.73428932, 621.39820146, 546.79167227, 536.06125591, 534.74570157, 525.44871074, 503.35340546, 467.76399443, 466.33940004, 414.50417188, 398.93472862, 396.38538743, 350.51765135, 338.38374510, 323.87502134, 320.37968400, 294.93450851, 280.77648119, 271.97768982, 266.70620503, 211.30064269, 118.18320829, 100.69831918, 60.72739038, 57.12567300, 3.08454189 )
#this vector contains the balances of the hole network
#B <- runif(50, 10000.0, 10000000.0)
#B<-c(16487422.17216726,10312169.84206757,4305307.87572907,4031770.77198099,2288358.60881004,2167626.99873483,1933929.89592037,948145.57650840,600125.22310064,520165.15518049,513285.70189458,390669.41885106,379237.11421437,358559.09103922,354218.35310903,334855.55185985,296593.62589238,283927.03330088,273452.94900842 ,254032.68993168,204209.22460590,200012.63860000,147477.24766700,134133.84636986,127783.71974378,119974.19040062,115884.40195930,113096.63989186,104054.63020069,103522.45083402,88684.23213461, 80002.08540000,79694.70581947,78217.37029927,73527.16160051,72106.39140112,63898.06985817,61741.96170504,61511.19180000,56774.32565027,50154.56762268,48875.79355104,45007.25880290,44924.27744538,42026.80047260,42020.32895777,34911.16513182,30012.54220015,28902.71348148,25152.56686099,24098.25965424,23261.47303225,22710.50613249,21773.00000000,18010.99860000,18006.80100208,15411.42096132,14316.95516560,13261.11671388,13003.24040000,10506.44480066,10229.69490867,10012.14075096,10003.09080000,9318.06220000,9223.21817245,8077.14843735,6758.34182461,6615.95514456,6370.77690890,6212.37238175,4973.65617341,4510.01880000,3500.06460000,3473.69284164, 3434.52954534,3309.55360105,2974.04020000,2963.37840000,2953.96274655,2504.81144754,2235.00520000,2030.05100000,1343.73569354,1012.00400000,7.72622186,1.24100011,0.44326236)
B<-c(16527553.15927899, 10387289.28886790, 4362416.97479571, 4016715.27352834, 2312195.75577051, 2130585.86256782, 1830578.72434511, 955063.35481694, 601209.42217253, 513408.83634278, 379235.12398147, 371208.87309473, 332727.44043910, 308695.38134892, 284746.60296519, 278358.96401319, 271788.67939320, 259111.58064717, 250679.38114351, 203893.06055901, 146482.04330822, 134004.03052966, 127059.38534541, 121915.90980040, 113364.88704800, 112870.79187321, 104662.10826277, 100329.33167876, 80181.78748702, 79474.20024176, 78139.41731552, 70357.43669308, 67115.43414925, 63892.56443558, 61511.20688128, 51376.32478983, 50263.58905283, 50154.44839533, 48856.86439316, 47165.12163987, 45007.29539684, 44168.56070771, 42014.34565158, 41100.02079390, 40890.02512578, 34893.97695438, 32424.62675660, 30012.58344201, 24635.01134514, 23387.14185752, 22111.46591738, 19927.28459818, 18007.78798257, 17081.66482021, 16208.72241557, 14311.50781454, 13307.20215927, 10498.59324712, 10229.87826565, 10035.48751437, 10003.19452229, 9884.09663392, 9278.25943086, 8871.83084595, 6774.75019777, 6617.86896883, 6161.16349678, 6140.95658656, 5087.82713190, 4809.67310919, 3350.05041905, 3025.74527706, 2619.80861207, 2344.43771261, 2306.16062486, 2071.39273127, 2038.54410650, 1992.71671716, 1840.18646640, 1802.31080674, 1693.83872075, 1623.70494116, 1572.08609828, 1465.01009673, 1157.47853361, 1097.72218970, 1067.28335409, 1027.98399682, 1001.00642790, 971.38556972, 935.68007703, 819.14636032, 807.49773704, 735.73428932, 621.39820146, 546.79167227, 536.06125591, 534.74570157, 525.44871074, 503.35340546, 467.76399443, 466.33940004, 414.50417188, 398.93472862, 396.38538743, 350.51765135, 338.38374510, 323.87502134, 320.37968400, 294.93450851, 280.77648119, 271.97768982, 266.70620503, 211.30064269, 118.18320829, 100.69831918, 60.72739038, 57.12567300, 3.08454189 )
sum_B <- sum(B)
print(sum_B)
#this vector contains the balances of the hole network
#B <- runif(50, 10000.0, 10000000.0)
#B<-c(16487422.17216726,10312169.84206757,4305307.87572907,4031770.77198099,2288358.60881004,2167626.99873483,1933929.89592037,948145.57650840,600125.22310064,520165.15518049,513285.70189458,390669.41885106,379237.11421437,358559.09103922,354218.35310903,334855.55185985,296593.62589238,283927.03330088,273452.94900842 ,254032.68993168,204209.22460590,200012.63860000,147477.24766700,134133.84636986,127783.71974378,119974.19040062,115884.40195930,113096.63989186,104054.63020069,103522.45083402,88684.23213461, 80002.08540000,79694.70581947,78217.37029927,73527.16160051,72106.39140112,63898.06985817,61741.96170504,61511.19180000,56774.32565027,50154.56762268,48875.79355104,45007.25880290,44924.27744538,42026.80047260,42020.32895777,34911.16513182,30012.54220015,28902.71348148,25152.56686099,24098.25965424,23261.47303225,22710.50613249,21773.00000000,18010.99860000,18006.80100208,15411.42096132,14316.95516560,13261.11671388,13003.24040000,10506.44480066,10229.69490867,10012.14075096,10003.09080000,9318.06220000,9223.21817245,8077.14843735,6758.34182461,6615.95514456,6370.77690890,6212.37238175,4973.65617341,4510.01880000,3500.06460000,3473.69284164, 3434.52954534,3309.55360105,2974.04020000,2963.37840000,2953.96274655,2504.81144754,2235.00520000,2030.05100000,1343.73569354,1012.00400000,7.72622186,1.24100011,0.44326236)
Average_Gen_Balance<-c(16527553.15927899, 10387289.28886790, 4362416.97479571, 4016715.27352834, 2312195.75577051, 2130585.86256782, 1830578.72434511, 955063.35481694, 601209.42217253, 513408.83634278, 379235.12398147, 371208.87309473, 332727.44043910, 308695.38134892, 284746.60296519, 278358.96401319, 271788.67939320, 259111.58064717, 250679.38114351, 203893.06055901, 146482.04330822, 134004.03052966, 127059.38534541, 121915.90980040, 113364.88704800, 112870.79187321, 104662.10826277, 100329.33167876, 80181.78748702, 79474.20024176, 78139.41731552, 70357.43669308, 67115.43414925, 63892.56443558, 61511.20688128, 51376.32478983, 50263.58905283, 50154.44839533, 48856.86439316, 47165.12163987, 45007.29539684, 44168.56070771, 42014.34565158, 41100.02079390, 40890.02512578, 34893.97695438, 32424.62675660, 30012.58344201, 24635.01134514, 23387.14185752, 22111.46591738, 19927.28459818, 18007.78798257, 17081.66482021, 16208.72241557, 14311.50781454, 13307.20215927, 10498.59324712, 10229.87826565, 10035.48751437, 10003.19452229, 9884.09663392, 9278.25943086, 8871.83084595, 6774.75019777, 6617.86896883, 6161.16349678, 6140.95658656, 5087.82713190, 4809.67310919, 3350.05041905, 3025.74527706, 2619.80861207, 2344.43771261, 2306.16062486, 2071.39273127, 2038.54410650, 1992.71671716, 1840.18646640, 1802.31080674, 1693.83872075, 1623.70494116, 1572.08609828, 1465.01009673, 1157.47853361, 1097.72218970, 1067.28335409, 1027.98399682, 1001.00642790, 971.38556972, 935.68007703, 819.14636032, 807.49773704, 735.73428932, 621.39820146, 546.79167227, 536.06125591, 534.74570157, 525.44871074, 503.35340546, 467.76399443, 466.33940004, 414.50417188, 398.93472862, 396.38538743, 350.51765135, 338.38374510, 323.87502134, 320.37968400, 294.93450851, 280.77648119, 271.97768982, 266.70620503, 211.30064269, 118.18320829, 100.69831918, 60.72739038, 57.12567300, 3.08454189 )
Estimated_Blocks<-c(14001.61, 8799.78, 3695.70, 3402.83, 1958.82, 1804.96, 1550.81, 809.10, 509.33, 434.94, 321.28, 314.48, 281.88, 261.52, 241.23, 235.82, 230.25, 219.51, 212.37, 172.73, 124.09, 113.52, 107.64, 103.28, 96.04, 95.62, 88.67, 85.00, 67.93, 67.33, 66.20, 59.60, 56.86, 54.13, 52.11, 43.52, 42.58, 42.49, 41.39, 39.96, 38.13, 37.42, 35.59, 34.82, 34.64, 29.56, 27.47, 25.43, 20.87, 19.81, 18.73, 16.88, 15.26, 14.47, 13.73, 12.12, 11.27, 8.89, 8.67, 8.50, 8.47, 8.37, 7.86, 7.52, 5.74, 5.61, 5.22, 5.20, 4.31, 4.07, 2.84, 2.56, 2.22, 1.99, 1.95, 1.75, 1.73, 1.69, 1.56, 1.53, 1.43, 1.38, 1.33, 1.24, 0.98, 0.93, 0.90, 0.87, 0.85, 0.82, 0.79, 0.69, 0.68, 0.62, 0.53, 0.46, 0.45, 0.45, 0.45, 0.43, 0.40, 0.40, 0.35, 0.34, 0.34, 0.30, 0.29, 0.27, 0.27, 0.25, 0.24, 0.23, 0.23, 0.18, 0.10, 0.09, 0.05, 0.05, 0.00)
Mined_Blocks<-c(17144, 8979, 2747, 3167, 1717, 1540, 1273, 630, 427, 352, 265, 254, 219, 196, 190, 168, 140, 187, 151, 158, 105, 94, 75, 89, 86, 45, 52, 73, 56, 35, 58, 58, 53, 50, 6, 27, 40, 30, 33, 33, 24, 38, 23, 34, 20, 24, 20, 12, 16, 8, 11, 6, 10, 14, 11, 6, 8, 3, 9, 4, 7, 9, 8, 7, 7, 5, 4, 4, 1, 3, 2, 1, 4, 3, 5, 1, 2, 5, 2, 2, 2, 3, 1, 3, 3, 2, 2, 1, 1, 2, 2, 1, 2, 3, 1, 2, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
sum_B <- sum(Average_Gen_Balance)
print(sum_B)
Average_Gen_Balance<-Average_Gen_Balance/sum_B
Indice_Of_Node <- seq(1, 119, 1)
#this is the max 256 bit number in base 16, we convert it into decimal number
V <- mpfr("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", base=16)
V<-format(as(V, "mpfr"), digits = NULL, drop0trailing = TRUE)
#K<-rep(0,373824)
Mined_Blocks_AND_Node_Weight<-rep(0,119)
#here we calcul the hash(n-1)/hash max
#for (i in 1:10000000) {
#  H[i]<-mpfr(digest(i, algo="sha256", serialize=TRUE), base=16)/V
# K[i]<-as.numeric(format(as(H[[i]], "mpfr"), digits = NULL, drop0trailing = TRUE))
#}
mydata = read.table("/Users/ayoubessourni/Documents/Waves_Forging_Algo/15_00_01.txt")
for (i in 1:41442) {
K[i]<-as.numeric(format(as((mpfr(digest(mydata[[1]][i], algo="sha256", serialize=TRUE), base=16)/V), "mpfr"), digits = NULL, drop0trailing = TRUE))
print(i)
sum <- 0
for (j in 1:119) {
sum <- sum + B[j]
if(sum>K[i]){
Mined_Blocks_AND_Node_Weight[j] <- Mined_Blocks_AND_Node_Weight[j] + 1
break
}
}
}
Mined_Blocks_AND_Node_Weight<-Mined_Blocks_AND_Node_Weight/41442
library("digest", lib.loc="/usr/local/lib/R/3.4/site-library")
library("Rmpfr", lib.loc="/usr/local/lib/R/3.4/site-library")
#this vector contains the balances of the hole network
#this vector contains the balances of the hole network
#this vector contains the balances of the hole network
#B <- runif(50, 10000.0, 10000000.0)
#B<-c(16487422.17216726,10312169.84206757,4305307.87572907,4031770.77198099,2288358.60881004,2167626.99873483,1933929.89592037,948145.57650840,600125.22310064,520165.15518049,513285.70189458,390669.41885106,379237.11421437,358559.09103922,354218.35310903,334855.55185985,296593.62589238,283927.03330088,273452.94900842 ,254032.68993168,204209.22460590,200012.63860000,147477.24766700,134133.84636986,127783.71974378,119974.19040062,115884.40195930,113096.63989186,104054.63020069,103522.45083402,88684.23213461, 80002.08540000,79694.70581947,78217.37029927,73527.16160051,72106.39140112,63898.06985817,61741.96170504,61511.19180000,56774.32565027,50154.56762268,48875.79355104,45007.25880290,44924.27744538,42026.80047260,42020.32895777,34911.16513182,30012.54220015,28902.71348148,25152.56686099,24098.25965424,23261.47303225,22710.50613249,21773.00000000,18010.99860000,18006.80100208,15411.42096132,14316.95516560,13261.11671388,13003.24040000,10506.44480066,10229.69490867,10012.14075096,10003.09080000,9318.06220000,9223.21817245,8077.14843735,6758.34182461,6615.95514456,6370.77690890,6212.37238175,4973.65617341,4510.01880000,3500.06460000,3473.69284164, 3434.52954534,3309.55360105,2974.04020000,2963.37840000,2953.96274655,2504.81144754,2235.00520000,2030.05100000,1343.73569354,1012.00400000,7.72622186,1.24100011,0.44326236)
Average_Gen_Balance<-c(16527553.15927899, 10387289.28886790, 4362416.97479571, 4016715.27352834, 2312195.75577051, 2130585.86256782, 1830578.72434511, 955063.35481694, 601209.42217253, 513408.83634278, 379235.12398147, 371208.87309473, 332727.44043910, 308695.38134892, 284746.60296519, 278358.96401319, 271788.67939320, 259111.58064717, 250679.38114351, 203893.06055901, 146482.04330822, 134004.03052966, 127059.38534541, 121915.90980040, 113364.88704800, 112870.79187321, 104662.10826277, 100329.33167876, 80181.78748702, 79474.20024176, 78139.41731552, 70357.43669308, 67115.43414925, 63892.56443558, 61511.20688128, 51376.32478983, 50263.58905283, 50154.44839533, 48856.86439316, 47165.12163987, 45007.29539684, 44168.56070771, 42014.34565158, 41100.02079390, 40890.02512578, 34893.97695438, 32424.62675660, 30012.58344201, 24635.01134514, 23387.14185752, 22111.46591738, 19927.28459818, 18007.78798257, 17081.66482021, 16208.72241557, 14311.50781454, 13307.20215927, 10498.59324712, 10229.87826565, 10035.48751437, 10003.19452229, 9884.09663392, 9278.25943086, 8871.83084595, 6774.75019777, 6617.86896883, 6161.16349678, 6140.95658656, 5087.82713190, 4809.67310919, 3350.05041905, 3025.74527706, 2619.80861207, 2344.43771261, 2306.16062486, 2071.39273127, 2038.54410650, 1992.71671716, 1840.18646640, 1802.31080674, 1693.83872075, 1623.70494116, 1572.08609828, 1465.01009673, 1157.47853361, 1097.72218970, 1067.28335409, 1027.98399682, 1001.00642790, 971.38556972, 935.68007703, 819.14636032, 807.49773704, 735.73428932, 621.39820146, 546.79167227, 536.06125591, 534.74570157, 525.44871074, 503.35340546, 467.76399443, 466.33940004, 414.50417188, 398.93472862, 396.38538743, 350.51765135, 338.38374510, 323.87502134, 320.37968400, 294.93450851, 280.77648119, 271.97768982, 266.70620503, 211.30064269, 118.18320829, 100.69831918, 60.72739038, 57.12567300, 3.08454189 )
Estimated_Blocks<-c(14001.61, 8799.78, 3695.70, 3402.83, 1958.82, 1804.96, 1550.81, 809.10, 509.33, 434.94, 321.28, 314.48, 281.88, 261.52, 241.23, 235.82, 230.25, 219.51, 212.37, 172.73, 124.09, 113.52, 107.64, 103.28, 96.04, 95.62, 88.67, 85.00, 67.93, 67.33, 66.20, 59.60, 56.86, 54.13, 52.11, 43.52, 42.58, 42.49, 41.39, 39.96, 38.13, 37.42, 35.59, 34.82, 34.64, 29.56, 27.47, 25.43, 20.87, 19.81, 18.73, 16.88, 15.26, 14.47, 13.73, 12.12, 11.27, 8.89, 8.67, 8.50, 8.47, 8.37, 7.86, 7.52, 5.74, 5.61, 5.22, 5.20, 4.31, 4.07, 2.84, 2.56, 2.22, 1.99, 1.95, 1.75, 1.73, 1.69, 1.56, 1.53, 1.43, 1.38, 1.33, 1.24, 0.98, 0.93, 0.90, 0.87, 0.85, 0.82, 0.79, 0.69, 0.68, 0.62, 0.53, 0.46, 0.45, 0.45, 0.45, 0.43, 0.40, 0.40, 0.35, 0.34, 0.34, 0.30, 0.29, 0.27, 0.27, 0.25, 0.24, 0.23, 0.23, 0.18, 0.10, 0.09, 0.05, 0.05, 0.00)
Mined_Blocks<-c(17144, 8979, 2747, 3167, 1717, 1540, 1273, 630, 427, 352, 265, 254, 219, 196, 190, 168, 140, 187, 151, 158, 105, 94, 75, 89, 86, 45, 52, 73, 56, 35, 58, 58, 53, 50, 6, 27, 40, 30, 33, 33, 24, 38, 23, 34, 20, 24, 20, 12, 16, 8, 11, 6, 10, 14, 11, 6, 8, 3, 9, 4, 7, 9, 8, 7, 7, 5, 4, 4, 1, 3, 2, 1, 4, 3, 5, 1, 2, 5, 2, 2, 2, 3, 1, 3, 3, 2, 2, 1, 1, 2, 2, 1, 2, 3, 1, 2, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
sum_B <- sum(Average_Gen_Balance)
#this vector contains the balances of the hole network
#B <- runif(50, 10000.0, 10000000.0)
#B<-c(16487422.17216726,10312169.84206757,4305307.87572907,4031770.77198099,2288358.60881004,2167626.99873483,1933929.89592037,948145.57650840,600125.22310064,520165.15518049,513285.70189458,390669.41885106,379237.11421437,358559.09103922,354218.35310903,334855.55185985,296593.62589238,283927.03330088,273452.94900842 ,254032.68993168,204209.22460590,200012.63860000,147477.24766700,134133.84636986,127783.71974378,119974.19040062,115884.40195930,113096.63989186,104054.63020069,103522.45083402,88684.23213461, 80002.08540000,79694.70581947,78217.37029927,73527.16160051,72106.39140112,63898.06985817,61741.96170504,61511.19180000,56774.32565027,50154.56762268,48875.79355104,45007.25880290,44924.27744538,42026.80047260,42020.32895777,34911.16513182,30012.54220015,28902.71348148,25152.56686099,24098.25965424,23261.47303225,22710.50613249,21773.00000000,18010.99860000,18006.80100208,15411.42096132,14316.95516560,13261.11671388,13003.24040000,10506.44480066,10229.69490867,10012.14075096,10003.09080000,9318.06220000,9223.21817245,8077.14843735,6758.34182461,6615.95514456,6370.77690890,6212.37238175,4973.65617341,4510.01880000,3500.06460000,3473.69284164, 3434.52954534,3309.55360105,2974.04020000,2963.37840000,2953.96274655,2504.81144754,2235.00520000,2030.05100000,1343.73569354,1012.00400000,7.72622186,1.24100011,0.44326236)
Average_Gen_Balance<-c(16527553.15927899, 10387289.28886790, 4362416.97479571, 4016715.27352834, 2312195.75577051, 2130585.86256782, 1830578.72434511, 955063.35481694, 601209.42217253, 513408.83634278, 379235.12398147, 371208.87309473, 332727.44043910, 308695.38134892, 284746.60296519, 278358.96401319, 271788.67939320, 259111.58064717, 250679.38114351, 203893.06055901, 146482.04330822, 134004.03052966, 127059.38534541, 121915.90980040, 113364.88704800, 112870.79187321, 104662.10826277, 100329.33167876, 80181.78748702, 79474.20024176, 78139.41731552, 70357.43669308, 67115.43414925, 63892.56443558, 61511.20688128, 51376.32478983, 50263.58905283, 50154.44839533, 48856.86439316, 47165.12163987, 45007.29539684, 44168.56070771, 42014.34565158, 41100.02079390, 40890.02512578, 34893.97695438, 32424.62675660, 30012.58344201, 24635.01134514, 23387.14185752, 22111.46591738, 19927.28459818, 18007.78798257, 17081.66482021, 16208.72241557, 14311.50781454, 13307.20215927, 10498.59324712, 10229.87826565, 10035.48751437, 10003.19452229, 9884.09663392, 9278.25943086, 8871.83084595, 6774.75019777, 6617.86896883, 6161.16349678, 6140.95658656, 5087.82713190, 4809.67310919, 3350.05041905, 3025.74527706, 2619.80861207, 2344.43771261, 2306.16062486, 2071.39273127, 2038.54410650, 1992.71671716, 1840.18646640, 1802.31080674, 1693.83872075, 1623.70494116, 1572.08609828, 1465.01009673, 1157.47853361, 1097.72218970, 1067.28335409, 1027.98399682, 1001.00642790, 971.38556972, 935.68007703, 819.14636032, 807.49773704, 735.73428932, 621.39820146, 546.79167227, 536.06125591, 534.74570157, 525.44871074, 503.35340546, 467.76399443, 466.33940004, 414.50417188, 398.93472862, 396.38538743, 350.51765135, 338.38374510, 323.87502134, 320.37968400, 294.93450851, 280.77648119, 271.97768982, 266.70620503, 211.30064269, 118.18320829, 100.69831918, 60.72739038, 57.12567300, 3.08454189 )
Estimated_Blocks<-c(14001.61, 8799.78, 3695.70, 3402.83, 1958.82, 1804.96, 1550.81, 809.10, 509.33, 434.94, 321.28, 314.48, 281.88, 261.52, 241.23, 235.82, 230.25, 219.51, 212.37, 172.73, 124.09, 113.52, 107.64, 103.28, 96.04, 95.62, 88.67, 85.00, 67.93, 67.33, 66.20, 59.60, 56.86, 54.13, 52.11, 43.52, 42.58, 42.49, 41.39, 39.96, 38.13, 37.42, 35.59, 34.82, 34.64, 29.56, 27.47, 25.43, 20.87, 19.81, 18.73, 16.88, 15.26, 14.47, 13.73, 12.12, 11.27, 8.89, 8.67, 8.50, 8.47, 8.37, 7.86, 7.52, 5.74, 5.61, 5.22, 5.20, 4.31, 4.07, 2.84, 2.56, 2.22, 1.99, 1.95, 1.75, 1.73, 1.69, 1.56, 1.53, 1.43, 1.38, 1.33, 1.24, 0.98, 0.93, 0.90, 0.87, 0.85, 0.82, 0.79, 0.69, 0.68, 0.62, 0.53, 0.46, 0.45, 0.45, 0.45, 0.43, 0.40, 0.40, 0.35, 0.34, 0.34, 0.30, 0.29, 0.27, 0.27, 0.25, 0.24, 0.23, 0.23, 0.18, 0.10, 0.09, 0.05, 0.05, 0.00)
Mined_Blocks<-c(17144, 8979, 2747, 3167, 1717, 1540, 1273, 630, 427, 352, 265, 254, 219, 196, 190, 168, 140, 187, 151, 158, 105, 94, 75, 89, 86, 45, 52, 73, 56, 35, 58, 58, 53, 50, 6, 27, 40, 30, 33, 33, 24, 38, 23, 34, 20, 24, 20, 12, 16, 8, 11, 6, 10, 14, 11, 6, 8, 3, 9, 4, 7, 9, 8, 7, 7, 5, 4, 4, 1, 3, 2, 1, 4, 3, 5, 1, 2, 5, 2, 2, 2, 3, 1, 3, 3, 2, 2, 1, 1, 2, 2, 1, 2, 3, 1, 2, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
sum_B <- sum(Average_Gen_Balance)
print(sum_B)
Average_Gen_Balance<-Average_Gen_Balance/sum_B
Indice_Of_Node <- seq(1, 119, 1)
#this is the max 256 bit number in base 16, we convert it into decimal number
V <- mpfr("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", base=16)
V<-format(as(V, "mpfr"), digits = NULL, drop0trailing = TRUE)
#K<-rep(0,373824)
Mined_Blocks_AND_Node_Weight<-rep(0,119)
#here we calcul the hash(n-1)/hash max
#for (i in 1:10000000) {
#  H[i]<-mpfr(digest(i, algo="sha256", serialize=TRUE), base=16)/V
# K[i]<-as.numeric(format(as(H[[i]], "mpfr"), digits = NULL, drop0trailing = TRUE))
#}
mydata = read.table("/Users/ayoubessourni/Documents/Waves_Forging_Algo/15_00_01.txt")
for (i in 1:41442) {
K[i]<-as.numeric(format(as((mpfr(digest(mydata[[1]][i], algo="sha256", serialize=TRUE), base=16)/V), "mpfr"), digits = NULL, drop0trailing = TRUE))
print(i)
sum <- 0
for (j in 1:119) {
sum <- sum + B[j]
if(sum>K[i]){
Mined_Blocks_AND_Node_Weight[j] <- Mined_Blocks_AND_Node_Weight[j] + 1
break
}
}
}
#this vector contains the balances of the hole network
#B <- runif(50, 10000.0, 10000000.0)
#B<-c(16487422.17216726,10312169.84206757,4305307.87572907,4031770.77198099,2288358.60881004,2167626.99873483,1933929.89592037,948145.57650840,600125.22310064,520165.15518049,513285.70189458,390669.41885106,379237.11421437,358559.09103922,354218.35310903,334855.55185985,296593.62589238,283927.03330088,273452.94900842 ,254032.68993168,204209.22460590,200012.63860000,147477.24766700,134133.84636986,127783.71974378,119974.19040062,115884.40195930,113096.63989186,104054.63020069,103522.45083402,88684.23213461, 80002.08540000,79694.70581947,78217.37029927,73527.16160051,72106.39140112,63898.06985817,61741.96170504,61511.19180000,56774.32565027,50154.56762268,48875.79355104,45007.25880290,44924.27744538,42026.80047260,42020.32895777,34911.16513182,30012.54220015,28902.71348148,25152.56686099,24098.25965424,23261.47303225,22710.50613249,21773.00000000,18010.99860000,18006.80100208,15411.42096132,14316.95516560,13261.11671388,13003.24040000,10506.44480066,10229.69490867,10012.14075096,10003.09080000,9318.06220000,9223.21817245,8077.14843735,6758.34182461,6615.95514456,6370.77690890,6212.37238175,4973.65617341,4510.01880000,3500.06460000,3473.69284164, 3434.52954534,3309.55360105,2974.04020000,2963.37840000,2953.96274655,2504.81144754,2235.00520000,2030.05100000,1343.73569354,1012.00400000,7.72622186,1.24100011,0.44326236)
Average_Gen_Balance<-c(16527553.15927899, 10387289.28886790, 4362416.97479571, 4016715.27352834, 2312195.75577051, 2130585.86256782, 1830578.72434511, 955063.35481694, 601209.42217253, 513408.83634278, 379235.12398147, 371208.87309473, 332727.44043910, 308695.38134892, 284746.60296519, 278358.96401319, 271788.67939320, 259111.58064717, 250679.38114351, 203893.06055901, 146482.04330822, 134004.03052966, 127059.38534541, 121915.90980040, 113364.88704800, 112870.79187321, 104662.10826277, 100329.33167876, 80181.78748702, 79474.20024176, 78139.41731552, 70357.43669308, 67115.43414925, 63892.56443558, 61511.20688128, 51376.32478983, 50263.58905283, 50154.44839533, 48856.86439316, 47165.12163987, 45007.29539684, 44168.56070771, 42014.34565158, 41100.02079390, 40890.02512578, 34893.97695438, 32424.62675660, 30012.58344201, 24635.01134514, 23387.14185752, 22111.46591738, 19927.28459818, 18007.78798257, 17081.66482021, 16208.72241557, 14311.50781454, 13307.20215927, 10498.59324712, 10229.87826565, 10035.48751437, 10003.19452229, 9884.09663392, 9278.25943086, 8871.83084595, 6774.75019777, 6617.86896883, 6161.16349678, 6140.95658656, 5087.82713190, 4809.67310919, 3350.05041905, 3025.74527706, 2619.80861207, 2344.43771261, 2306.16062486, 2071.39273127, 2038.54410650, 1992.71671716, 1840.18646640, 1802.31080674, 1693.83872075, 1623.70494116, 1572.08609828, 1465.01009673, 1157.47853361, 1097.72218970, 1067.28335409, 1027.98399682, 1001.00642790, 971.38556972, 935.68007703, 819.14636032, 807.49773704, 735.73428932, 621.39820146, 546.79167227, 536.06125591, 534.74570157, 525.44871074, 503.35340546, 467.76399443, 466.33940004, 414.50417188, 398.93472862, 396.38538743, 350.51765135, 338.38374510, 323.87502134, 320.37968400, 294.93450851, 280.77648119, 271.97768982, 266.70620503, 211.30064269, 118.18320829, 100.69831918, 60.72739038, 57.12567300, 3.08454189 )
Estimated_Blocks<-c(14001.61, 8799.78, 3695.70, 3402.83, 1958.82, 1804.96, 1550.81, 809.10, 509.33, 434.94, 321.28, 314.48, 281.88, 261.52, 241.23, 235.82, 230.25, 219.51, 212.37, 172.73, 124.09, 113.52, 107.64, 103.28, 96.04, 95.62, 88.67, 85.00, 67.93, 67.33, 66.20, 59.60, 56.86, 54.13, 52.11, 43.52, 42.58, 42.49, 41.39, 39.96, 38.13, 37.42, 35.59, 34.82, 34.64, 29.56, 27.47, 25.43, 20.87, 19.81, 18.73, 16.88, 15.26, 14.47, 13.73, 12.12, 11.27, 8.89, 8.67, 8.50, 8.47, 8.37, 7.86, 7.52, 5.74, 5.61, 5.22, 5.20, 4.31, 4.07, 2.84, 2.56, 2.22, 1.99, 1.95, 1.75, 1.73, 1.69, 1.56, 1.53, 1.43, 1.38, 1.33, 1.24, 0.98, 0.93, 0.90, 0.87, 0.85, 0.82, 0.79, 0.69, 0.68, 0.62, 0.53, 0.46, 0.45, 0.45, 0.45, 0.43, 0.40, 0.40, 0.35, 0.34, 0.34, 0.30, 0.29, 0.27, 0.27, 0.25, 0.24, 0.23, 0.23, 0.18, 0.10, 0.09, 0.05, 0.05, 0.00)
Mined_Blocks<-c(17144, 8979, 2747, 3167, 1717, 1540, 1273, 630, 427, 352, 265, 254, 219, 196, 190, 168, 140, 187, 151, 158, 105, 94, 75, 89, 86, 45, 52, 73, 56, 35, 58, 58, 53, 50, 6, 27, 40, 30, 33, 33, 24, 38, 23, 34, 20, 24, 20, 12, 16, 8, 11, 6, 10, 14, 11, 6, 8, 3, 9, 4, 7, 9, 8, 7, 7, 5, 4, 4, 1, 3, 2, 1, 4, 3, 5, 1, 2, 5, 2, 2, 2, 3, 1, 3, 3, 2, 2, 1, 1, 2, 2, 1, 2, 3, 1, 2, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
sum_B <- sum(Average_Gen_Balance)
print(sum_B)
Average_Gen_Balance<-Average_Gen_Balance/sum_B
Indice_Of_Node <- seq(1, 119, 1)
#this is the max 256 bit number in base 16, we convert it into decimal number
V <- mpfr("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", base=16)
V<-format(as(V, "mpfr"), digits = NULL, drop0trailing = TRUE)
#K<-rep(0,373824)
Mined_Blocks_AND_Node_Weight<-rep(0,119)
#here we calcul the hash(n-1)/hash max
#for (i in 1:10000000) {
#  H[i]<-mpfr(digest(i, algo="sha256", serialize=TRUE), base=16)/V
# K[i]<-as.numeric(format(as(H[[i]], "mpfr"), digits = NULL, drop0trailing = TRUE))
#}
mydata = read.table("/Users/ayoubessourni/Documents/Waves_Forging_Algo/15_00_01.txt")
for (i in 1:41442) {
K[i]<-as.numeric(format(as((mpfr(digest(mydata[[1]][i], algo="sha256", serialize=TRUE), base=16)/V), "mpfr"), digits = NULL, drop0trailing = TRUE))
print(i)
sum <- 0
for (j in 1:119) {
sum <- sum + Average_Gen_Balance[j]
if(sum>K[i]){
Mined_Blocks_AND_Node_Weight[j] <- Mined_Blocks_AND_Node_Weight[j] + 1
break
}
}
}
#this vector contains the balances of the hole network
#B <- runif(50, 10000.0, 10000000.0)
#B<-c(16487422.17216726,10312169.84206757,4305307.87572907,4031770.77198099,2288358.60881004,2167626.99873483,1933929.89592037,948145.57650840,600125.22310064,520165.15518049,513285.70189458,390669.41885106,379237.11421437,358559.09103922,354218.35310903,334855.55185985,296593.62589238,283927.03330088,273452.94900842 ,254032.68993168,204209.22460590,200012.63860000,147477.24766700,134133.84636986,127783.71974378,119974.19040062,115884.40195930,113096.63989186,104054.63020069,103522.45083402,88684.23213461, 80002.08540000,79694.70581947,78217.37029927,73527.16160051,72106.39140112,63898.06985817,61741.96170504,61511.19180000,56774.32565027,50154.56762268,48875.79355104,45007.25880290,44924.27744538,42026.80047260,42020.32895777,34911.16513182,30012.54220015,28902.71348148,25152.56686099,24098.25965424,23261.47303225,22710.50613249,21773.00000000,18010.99860000,18006.80100208,15411.42096132,14316.95516560,13261.11671388,13003.24040000,10506.44480066,10229.69490867,10012.14075096,10003.09080000,9318.06220000,9223.21817245,8077.14843735,6758.34182461,6615.95514456,6370.77690890,6212.37238175,4973.65617341,4510.01880000,3500.06460000,3473.69284164, 3434.52954534,3309.55360105,2974.04020000,2963.37840000,2953.96274655,2504.81144754,2235.00520000,2030.05100000,1343.73569354,1012.00400000,7.72622186,1.24100011,0.44326236)
Average_Gen_Balance<-c(16527553.15927899, 10387289.28886790, 4362416.97479571, 4016715.27352834, 2312195.75577051, 2130585.86256782, 1830578.72434511, 955063.35481694, 601209.42217253, 513408.83634278, 379235.12398147, 371208.87309473, 332727.44043910, 308695.38134892, 284746.60296519, 278358.96401319, 271788.67939320, 259111.58064717, 250679.38114351, 203893.06055901, 146482.04330822, 134004.03052966, 127059.38534541, 121915.90980040, 113364.88704800, 112870.79187321, 104662.10826277, 100329.33167876, 80181.78748702, 79474.20024176, 78139.41731552, 70357.43669308, 67115.43414925, 63892.56443558, 61511.20688128, 51376.32478983, 50263.58905283, 50154.44839533, 48856.86439316, 47165.12163987, 45007.29539684, 44168.56070771, 42014.34565158, 41100.02079390, 40890.02512578, 34893.97695438, 32424.62675660, 30012.58344201, 24635.01134514, 23387.14185752, 22111.46591738, 19927.28459818, 18007.78798257, 17081.66482021, 16208.72241557, 14311.50781454, 13307.20215927, 10498.59324712, 10229.87826565, 10035.48751437, 10003.19452229, 9884.09663392, 9278.25943086, 8871.83084595, 6774.75019777, 6617.86896883, 6161.16349678, 6140.95658656, 5087.82713190, 4809.67310919, 3350.05041905, 3025.74527706, 2619.80861207, 2344.43771261, 2306.16062486, 2071.39273127, 2038.54410650, 1992.71671716, 1840.18646640, 1802.31080674, 1693.83872075, 1623.70494116, 1572.08609828, 1465.01009673, 1157.47853361, 1097.72218970, 1067.28335409, 1027.98399682, 1001.00642790, 971.38556972, 935.68007703, 819.14636032, 807.49773704, 735.73428932, 621.39820146, 546.79167227, 536.06125591, 534.74570157, 525.44871074, 503.35340546, 467.76399443, 466.33940004, 414.50417188, 398.93472862, 396.38538743, 350.51765135, 338.38374510, 323.87502134, 320.37968400, 294.93450851, 280.77648119, 271.97768982, 266.70620503, 211.30064269, 118.18320829, 100.69831918, 60.72739038, 57.12567300, 3.08454189 )
Estimated_Blocks<-c(14001.61, 8799.78, 3695.70, 3402.83, 1958.82, 1804.96, 1550.81, 809.10, 509.33, 434.94, 321.28, 314.48, 281.88, 261.52, 241.23, 235.82, 230.25, 219.51, 212.37, 172.73, 124.09, 113.52, 107.64, 103.28, 96.04, 95.62, 88.67, 85.00, 67.93, 67.33, 66.20, 59.60, 56.86, 54.13, 52.11, 43.52, 42.58, 42.49, 41.39, 39.96, 38.13, 37.42, 35.59, 34.82, 34.64, 29.56, 27.47, 25.43, 20.87, 19.81, 18.73, 16.88, 15.26, 14.47, 13.73, 12.12, 11.27, 8.89, 8.67, 8.50, 8.47, 8.37, 7.86, 7.52, 5.74, 5.61, 5.22, 5.20, 4.31, 4.07, 2.84, 2.56, 2.22, 1.99, 1.95, 1.75, 1.73, 1.69, 1.56, 1.53, 1.43, 1.38, 1.33, 1.24, 0.98, 0.93, 0.90, 0.87, 0.85, 0.82, 0.79, 0.69, 0.68, 0.62, 0.53, 0.46, 0.45, 0.45, 0.45, 0.43, 0.40, 0.40, 0.35, 0.34, 0.34, 0.30, 0.29, 0.27, 0.27, 0.25, 0.24, 0.23, 0.23, 0.18, 0.10, 0.09, 0.05, 0.05, 0.00)
Mined_Blocks<-c(17144, 8979, 2747, 3167, 1717, 1540, 1273, 630, 427, 352, 265, 254, 219, 196, 190, 168, 140, 187, 151, 158, 105, 94, 75, 89, 86, 45, 52, 73, 56, 35, 58, 58, 53, 50, 6, 27, 40, 30, 33, 33, 24, 38, 23, 34, 20, 24, 20, 12, 16, 8, 11, 6, 10, 14, 11, 6, 8, 3, 9, 4, 7, 9, 8, 7, 7, 5, 4, 4, 1, 3, 2, 1, 4, 3, 5, 1, 2, 5, 2, 2, 2, 3, 1, 3, 3, 2, 2, 1, 1, 2, 2, 1, 2, 3, 1, 2, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
sum_B <- sum(Average_Gen_Balance)
Average_Gen_Balance-percent<-Average_Gen_Balance/sum_B
sum_Est_Blocks<-sum(Estimated_Blocks)
Estimated_Blocks-percent<-Estimated_Blocks/sum_Est_Blocks
sum_M_Blocks<-sum(Mined_Blocks)
Mined_Blocks-percent<-Mined_Blocks/sum_M_Blocks
Indice_Of_Node <- seq(1, 119, 1)
#this vector contains the balances of the hole network
#B <- runif(50, 10000.0, 10000000.0)
#B<-c(16487422.17216726,10312169.84206757,4305307.87572907,4031770.77198099,2288358.60881004,2167626.99873483,1933929.89592037,948145.57650840,600125.22310064,520165.15518049,513285.70189458,390669.41885106,379237.11421437,358559.09103922,354218.35310903,334855.55185985,296593.62589238,283927.03330088,273452.94900842 ,254032.68993168,204209.22460590,200012.63860000,147477.24766700,134133.84636986,127783.71974378,119974.19040062,115884.40195930,113096.63989186,104054.63020069,103522.45083402,88684.23213461, 80002.08540000,79694.70581947,78217.37029927,73527.16160051,72106.39140112,63898.06985817,61741.96170504,61511.19180000,56774.32565027,50154.56762268,48875.79355104,45007.25880290,44924.27744538,42026.80047260,42020.32895777,34911.16513182,30012.54220015,28902.71348148,25152.56686099,24098.25965424,23261.47303225,22710.50613249,21773.00000000,18010.99860000,18006.80100208,15411.42096132,14316.95516560,13261.11671388,13003.24040000,10506.44480066,10229.69490867,10012.14075096,10003.09080000,9318.06220000,9223.21817245,8077.14843735,6758.34182461,6615.95514456,6370.77690890,6212.37238175,4973.65617341,4510.01880000,3500.06460000,3473.69284164, 3434.52954534,3309.55360105,2974.04020000,2963.37840000,2953.96274655,2504.81144754,2235.00520000,2030.05100000,1343.73569354,1012.00400000,7.72622186,1.24100011,0.44326236)
Average_Gen_Balance<-c(16527553.15927899, 10387289.28886790, 4362416.97479571, 4016715.27352834, 2312195.75577051, 2130585.86256782, 1830578.72434511, 955063.35481694, 601209.42217253, 513408.83634278, 379235.12398147, 371208.87309473, 332727.44043910, 308695.38134892, 284746.60296519, 278358.96401319, 271788.67939320, 259111.58064717, 250679.38114351, 203893.06055901, 146482.04330822, 134004.03052966, 127059.38534541, 121915.90980040, 113364.88704800, 112870.79187321, 104662.10826277, 100329.33167876, 80181.78748702, 79474.20024176, 78139.41731552, 70357.43669308, 67115.43414925, 63892.56443558, 61511.20688128, 51376.32478983, 50263.58905283, 50154.44839533, 48856.86439316, 47165.12163987, 45007.29539684, 44168.56070771, 42014.34565158, 41100.02079390, 40890.02512578, 34893.97695438, 32424.62675660, 30012.58344201, 24635.01134514, 23387.14185752, 22111.46591738, 19927.28459818, 18007.78798257, 17081.66482021, 16208.72241557, 14311.50781454, 13307.20215927, 10498.59324712, 10229.87826565, 10035.48751437, 10003.19452229, 9884.09663392, 9278.25943086, 8871.83084595, 6774.75019777, 6617.86896883, 6161.16349678, 6140.95658656, 5087.82713190, 4809.67310919, 3350.05041905, 3025.74527706, 2619.80861207, 2344.43771261, 2306.16062486, 2071.39273127, 2038.54410650, 1992.71671716, 1840.18646640, 1802.31080674, 1693.83872075, 1623.70494116, 1572.08609828, 1465.01009673, 1157.47853361, 1097.72218970, 1067.28335409, 1027.98399682, 1001.00642790, 971.38556972, 935.68007703, 819.14636032, 807.49773704, 735.73428932, 621.39820146, 546.79167227, 536.06125591, 534.74570157, 525.44871074, 503.35340546, 467.76399443, 466.33940004, 414.50417188, 398.93472862, 396.38538743, 350.51765135, 338.38374510, 323.87502134, 320.37968400, 294.93450851, 280.77648119, 271.97768982, 266.70620503, 211.30064269, 118.18320829, 100.69831918, 60.72739038, 57.12567300, 3.08454189 )
Estimated_Blocks<-c(14001.61, 8799.78, 3695.70, 3402.83, 1958.82, 1804.96, 1550.81, 809.10, 509.33, 434.94, 321.28, 314.48, 281.88, 261.52, 241.23, 235.82, 230.25, 219.51, 212.37, 172.73, 124.09, 113.52, 107.64, 103.28, 96.04, 95.62, 88.67, 85.00, 67.93, 67.33, 66.20, 59.60, 56.86, 54.13, 52.11, 43.52, 42.58, 42.49, 41.39, 39.96, 38.13, 37.42, 35.59, 34.82, 34.64, 29.56, 27.47, 25.43, 20.87, 19.81, 18.73, 16.88, 15.26, 14.47, 13.73, 12.12, 11.27, 8.89, 8.67, 8.50, 8.47, 8.37, 7.86, 7.52, 5.74, 5.61, 5.22, 5.20, 4.31, 4.07, 2.84, 2.56, 2.22, 1.99, 1.95, 1.75, 1.73, 1.69, 1.56, 1.53, 1.43, 1.38, 1.33, 1.24, 0.98, 0.93, 0.90, 0.87, 0.85, 0.82, 0.79, 0.69, 0.68, 0.62, 0.53, 0.46, 0.45, 0.45, 0.45, 0.43, 0.40, 0.40, 0.35, 0.34, 0.34, 0.30, 0.29, 0.27, 0.27, 0.25, 0.24, 0.23, 0.23, 0.18, 0.10, 0.09, 0.05, 0.05, 0.00)
Mined_Blocks<-c(17144, 8979, 2747, 3167, 1717, 1540, 1273, 630, 427, 352, 265, 254, 219, 196, 190, 168, 140, 187, 151, 158, 105, 94, 75, 89, 86, 45, 52, 73, 56, 35, 58, 58, 53, 50, 6, 27, 40, 30, 33, 33, 24, 38, 23, 34, 20, 24, 20, 12, 16, 8, 11, 6, 10, 14, 11, 6, 8, 3, 9, 4, 7, 9, 8, 7, 7, 5, 4, 4, 1, 3, 2, 1, 4, 3, 5, 1, 2, 5, 2, 2, 2, 3, 1, 3, 3, 2, 2, 1, 1, 2, 2, 1, 2, 3, 1, 2, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
sum_B <- sum(Average_Gen_Balance)
Average_Gen_Balance_percent<-Average_Gen_Balance/sum_B
sum_Est_Blocks <- sum(Estimated_Blocks)
Estimated_Blocks_percent<-Estimated_Blocks/sum_Est_Blocks
sum_M_Blocks<-sum(Mined_Blocks)
Mined_Blocks_percent<-Mined_Blocks/sum_M_Blocks
Indice_Of_Node <- seq(1, 119, 1)
#this is the max 256 bit number in base 16, we convert it into decimal number
V <- mpfr("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", base=16)
V<-format(as(V, "mpfr"), digits = NULL, drop0trailing = TRUE)
#K<-rep(0,373824)
Mined_Blocks_Hash_Test<-rep(0,119)
#here we calcul the hash(n-1)/hash max
#for (i in 1:10000000) {
#  H[i]<-mpfr(digest(i, algo="sha256", serialize=TRUE), base=16)/V
# K[i]<-as.numeric(format(as(H[[i]], "mpfr"), digits = NULL, drop0trailing = TRUE))
#}
mydata = read.table("/Users/ayoubessourni/Documents/Waves_Forging_Algo/15_00_01.txt")
for (i in 1:41442) {
K[i]<-as.numeric(format(as((mpfr(digest(mydata[[1]][i], algo="sha256", serialize=TRUE), base=16)/V), "mpfr"), digits = NULL, drop0trailing = TRUE))
print(i)
sum <- 0
for (j in 1:119) {
sum <- sum + Average_Gen_Balance_percent[j]
if(sum>K[i]){
Mined_Blocks_Hash_Test[j] <- Mined_Blocks_Hash_Test[j] + 1
break
}
}
}
Mined_Blocks_Hash_Test_percent<-Mined_Blocks_Hash_Test/41442
bitmap("/Users/ayoubessourni/Desktop/Mined_Blocks_Hash_Test_percent_over_Indice.tiff", height = 4, width = 4, units = 'in', type="tifflzw", res=2400)
plot(Indice_Of_Node, Mined_Blocks_Hash_Test_percent, xlab = "Indice of Weight b", ylab = "Mined Blocks(f) and Node's Weights(g)",type = "l", col="red")
lines(Indice_Of_Node, Average_Gen_Balance_percent, col="green",lty=2)
legend("topright", legend=c("f: Node's Weights","g: Mined Blocks"),
col=c("red", "blue"), lty=1:2, cex=0.8)
dev.off()
par(mfrow = c(1,1))
bitmap("/Users/ayoubessourni/Desktop/Mined_Blocks_Hash_Test_percent_over_Average_Gen_Balance-percent.tiff", height = 4, width = 4, units = 'in', type="tifflzw", res=2400)
plot(Average_Gen_Balance_percent, Mined_Blocks_Hash_Test_percent, xlab = "Weight b", ylab = "Mined Blocks",type = "l", col="red")
#lines(Indice_Of_Node,B,col="green",lty=2)
legend("topleft", legend=c("Mined Blocks over there Weights"),
col=c("red"), lty=1:2, cex=0.8)
dev.off()
par(mfrow = c(1,1))
bitmap("/Users/ayoubessourni/Desktop/Mined_Blocks-percent_over_Indice_Of_Node.tiff", height = 4, width = 4, units = 'in', type="tifflzw", res=2400)
plot(Indice_Of_Node, Mined_Blocks_percent, xlab = "Indice of Weight b", ylab = "Mined Blocks(f) and Node's Weights(g)",type = "l", col="red")
lines(Indice_Of_Node, Average_Gen_Balance_percent, col="green",lty=2)
legend("topright", legend=c("f: Node's Weights","g: Mined Blocks"),
col=c("red", "blue"), lty=1:2, cex=0.8)
dev.off()
par(mfrow = c(1,1))
bitmap("/Users/ayoubessourni/Desktop/Mined_Blocks-percent_over_Average_Gen_Balance-percent.tiff", height = 4, width = 4, units = 'in', type="tifflzw", res=2400)
plot(Average_Gen_Balance-percent, Mined_Blocks_percent, xlab = "Weight b", ylab = "Mined Blocks",type = "l", col="red")
#lines(Indice_Of_Node,B,col="green",lty=2)
legend("topleft", legend=c("Mined Blocks over there Weights"),
col=c("red"), lty=1:2, cex=0.8)
dev.off()
par(mfrow = c(1,1))
write.table( Mined_Blocks_Hash_Test, "/Users/ayoubessourni/Desktop/mydata_Mined_Blocks_Test.txt", sep="\t")
write.table( Mined_Blocks, "/Users/ayoubessourni/Desktop/mydata_Mined_Blocks.txt", sep="\t")
write.table( Estimated_Blocks, "/Users/ayoubessourni/Desktop/mydata_Estimated_Blocks.txt", sep="\t")
# Create the data for the chart.
# Create the data for the chart.
#Histo <- Result
#this vector contains the balances of the hole network
#B <- runif(50, 10000.0, 10000000.0)
#B<-c(16487422.17216726,10312169.84206757,4305307.87572907,4031770.77198099,2288358.60881004,2167626.99873483,1933929.89592037,948145.57650840,600125.22310064,520165.15518049,513285.70189458,390669.41885106,379237.11421437,358559.09103922,354218.35310903,334855.55185985,296593.62589238,283927.03330088,273452.94900842 ,254032.68993168,204209.22460590,200012.63860000,147477.24766700,134133.84636986,127783.71974378,119974.19040062,115884.40195930,113096.63989186,104054.63020069,103522.45083402,88684.23213461, 80002.08540000,79694.70581947,78217.37029927,73527.16160051,72106.39140112,63898.06985817,61741.96170504,61511.19180000,56774.32565027,50154.56762268,48875.79355104,45007.25880290,44924.27744538,42026.80047260,42020.32895777,34911.16513182,30012.54220015,28902.71348148,25152.56686099,24098.25965424,23261.47303225,22710.50613249,21773.00000000,18010.99860000,18006.80100208,15411.42096132,14316.95516560,13261.11671388,13003.24040000,10506.44480066,10229.69490867,10012.14075096,10003.09080000,9318.06220000,9223.21817245,8077.14843735,6758.34182461,6615.95514456,6370.77690890,6212.37238175,4973.65617341,4510.01880000,3500.06460000,3473.69284164, 3434.52954534,3309.55360105,2974.04020000,2963.37840000,2953.96274655,2504.81144754,2235.00520000,2030.05100000,1343.73569354,1012.00400000,7.72622186,1.24100011,0.44326236)
Average_Gen_Balance<-c(16527553.15927899, 10387289.28886790, 4362416.97479571, 4016715.27352834, 2312195.75577051, 2130585.86256782, 1830578.72434511, 955063.35481694, 601209.42217253, 513408.83634278, 379235.12398147, 371208.87309473, 332727.44043910, 308695.38134892, 284746.60296519, 278358.96401319, 271788.67939320, 259111.58064717, 250679.38114351, 203893.06055901, 146482.04330822, 134004.03052966, 127059.38534541, 121915.90980040, 113364.88704800, 112870.79187321, 104662.10826277, 100329.33167876, 80181.78748702, 79474.20024176, 78139.41731552, 70357.43669308, 67115.43414925, 63892.56443558, 61511.20688128, 51376.32478983, 50263.58905283, 50154.44839533, 48856.86439316, 47165.12163987, 45007.29539684, 44168.56070771, 42014.34565158, 41100.02079390, 40890.02512578, 34893.97695438, 32424.62675660, 30012.58344201, 24635.01134514, 23387.14185752, 22111.46591738, 19927.28459818, 18007.78798257, 17081.66482021, 16208.72241557, 14311.50781454, 13307.20215927, 10498.59324712, 10229.87826565, 10035.48751437, 10003.19452229, 9884.09663392, 9278.25943086, 8871.83084595, 6774.75019777, 6617.86896883, 6161.16349678, 6140.95658656, 5087.82713190, 4809.67310919, 3350.05041905, 3025.74527706, 2619.80861207, 2344.43771261, 2306.16062486, 2071.39273127, 2038.54410650, 1992.71671716, 1840.18646640, 1802.31080674, 1693.83872075, 1623.70494116, 1572.08609828, 1465.01009673, 1157.47853361, 1097.72218970, 1067.28335409, 1027.98399682, 1001.00642790, 971.38556972, 935.68007703, 819.14636032, 807.49773704, 735.73428932, 621.39820146, 546.79167227, 536.06125591, 534.74570157, 525.44871074, 503.35340546, 467.76399443, 466.33940004, 414.50417188, 398.93472862, 396.38538743, 350.51765135, 338.38374510, 323.87502134, 320.37968400, 294.93450851, 280.77648119, 271.97768982, 266.70620503, 211.30064269, 118.18320829, 100.69831918, 60.72739038, 57.12567300, 3.08454189 )
Estimated_Blocks<-c(14001.61, 8799.78, 3695.70, 3402.83, 1958.82, 1804.96, 1550.81, 809.10, 509.33, 434.94, 321.28, 314.48, 281.88, 261.52, 241.23, 235.82, 230.25, 219.51, 212.37, 172.73, 124.09, 113.52, 107.64, 103.28, 96.04, 95.62, 88.67, 85.00, 67.93, 67.33, 66.20, 59.60, 56.86, 54.13, 52.11, 43.52, 42.58, 42.49, 41.39, 39.96, 38.13, 37.42, 35.59, 34.82, 34.64, 29.56, 27.47, 25.43, 20.87, 19.81, 18.73, 16.88, 15.26, 14.47, 13.73, 12.12, 11.27, 8.89, 8.67, 8.50, 8.47, 8.37, 7.86, 7.52, 5.74, 5.61, 5.22, 5.20, 4.31, 4.07, 2.84, 2.56, 2.22, 1.99, 1.95, 1.75, 1.73, 1.69, 1.56, 1.53, 1.43, 1.38, 1.33, 1.24, 0.98, 0.93, 0.90, 0.87, 0.85, 0.82, 0.79, 0.69, 0.68, 0.62, 0.53, 0.46, 0.45, 0.45, 0.45, 0.43, 0.40, 0.40, 0.35, 0.34, 0.34, 0.30, 0.29, 0.27, 0.27, 0.25, 0.24, 0.23, 0.23, 0.18, 0.10, 0.09, 0.05, 0.05, 0.00)
Mined_Blocks<-c(17144, 8979, 2747, 3167, 1717, 1540, 1273, 630, 427, 352, 265, 254, 219, 196, 190, 168, 140, 187, 151, 158, 105, 94, 75, 89, 86, 45, 52, 73, 56, 35, 58, 58, 53, 50, 6, 27, 40, 30, 33, 33, 24, 38, 23, 34, 20, 24, 20, 12, 16, 8, 11, 6, 10, 14, 11, 6, 8, 3, 9, 4, 7, 9, 8, 7, 7, 5, 4, 4, 1, 3, 2, 1, 4, 3, 5, 1, 2, 5, 2, 2, 2, 3, 1, 3, 3, 2, 2, 1, 1, 2, 2, 1, 2, 3, 1, 2, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
sum_B <- sum(Average_Gen_Balance)
Average_Gen_Balance_percent<-Average_Gen_Balance/sum_B
sum_Est_Blocks <- sum(Estimated_Blocks)
Estimated_Blocks_percent<-Estimated_Blocks/sum_Est_Blocks
sum_M_Blocks<-sum(Mined_Blocks)
Mined_Blocks_percent<-Mined_Blocks/sum_M_Blocks
Indice_Of_Node <- seq(1, 119, 1)
#this is the max 256 bit number in base 16, we convert it into decimal number
V <- mpfr("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", base=16)
V<-format(as(V, "mpfr"), digits = NULL, drop0trailing = TRUE)
#K<-rep(0,373824)
Mined_Blocks_Hash_Test<-rep(0,119)
#here we calcul the hash(n-1)/hash max
#for (i in 1:10000000) {
#  H[i]<-mpfr(digest(i, algo="sha256", serialize=TRUE), base=16)/V
# K[i]<-as.numeric(format(as(H[[i]], "mpfr"), digits = NULL, drop0trailing = TRUE))
#}
mydata = read.table("/Users/ayoubessourni/Documents/Waves_Forging_Algo/15_00_01.txt")
for (i in 1:41442) {
K[i]<-as.numeric(format(as((mpfr(digest(mydata[[1]][i], algo="sha256", serialize=TRUE), base=16)/V), "mpfr"), digits = NULL, drop0trailing = TRUE))
print(i)
sum <- 0
for (j in 1:119) {
sum <- sum + Average_Gen_Balance_percent[j]
if(sum>K[i]){
Mined_Blocks_Hash_Test[j] <- Mined_Blocks_Hash_Test[j] + 1
break
}
}
}
Mined_Blocks_Hash_Test_percent<-Mined_Blocks_Hash_Test/41442
bitmap("/Users/ayoubessourni/Desktop/Mined_Blocks_Hash_Test_percent_over_Indice.tiff", height = 4, width = 4, units = 'in', type="tifflzw", res=2400)
plot(Indice_Of_Node, Mined_Blocks_Hash_Test_percent, xlab = "Indice of Weight b", ylab = "Mined Blocks(f) and Node's Weights(g)",type = "p", col="red")
lines(Indice_Of_Node, Average_Gen_Balance_percent, col="green",lty=2, type = "p")
legend("topright", legend=c("f: Node's Weights","g: Mined Blocks"),
col=c("red", "blue"), lty=1:2, cex=0.8)
dev.off()
par(mfrow = c(1,1))
bitmap("/Users/ayoubessourni/Desktop/Mined_Blocks_Hash_Test_percent_over_Average_Gen_Balance-percent.tiff", height = 4, width = 4, units = 'in', type="tifflzw", res=2400)
plot(Average_Gen_Balance_percent, Mined_Blocks_Hash_Test_percent, xlab = "Weight b", ylab = "Mined Blocks",type = "p", col="red")
#lines(Indice_Of_Node,B,col="green",lty=2)
legend("topleft", legend=c("Mined Blocks over there Weights"),
col=c("red"), lty=1:2, cex=0.8)
dev.off()
par(mfrow = c(1,1))
bitmap("/Users/ayoubessourni/Desktop/Mined_Blocks-percent_over_Indice_Of_Node.tiff", height = 4, width = 4, units = 'in', type="tifflzw", res=2400)
plot(Indice_Of_Node, Mined_Blocks_percent, xlab = "Indice of Weight b", ylab = "Mined Blocks(f) and Node's Weights(g)",type = "p", col="red")
lines(Indice_Of_Node, Average_Gen_Balance_percent, col="green",lty=2, type = "p")
legend("topright", legend=c("f: Node's Weights","g: Mined Blocks"),
col=c("red", "blue"), lty=1:2, cex=0.8)
dev.off()
par(mfrow = c(1,1))
bitmap("/Users/ayoubessourni/Desktop/Mined_Blocks-percent_over_Average_Gen_Balance-percent.tiff", height = 4, width = 4, units = 'in', type="tifflzw", res=2400)
plot(Average_Gen_Balance_percent, Mined_Blocks_percent, xlab = "Weight b", ylab = "Mined Blocks",type = "p", col="red")
#lines(Indice_Of_Node,B,col="green",lty=2)
legend("topleft", legend=c("Mined Blocks over there Weights"),
col=c("red"), lty=1:2, cex=0.8)
dev.off()
par(mfrow = c(1,1))
write.table( Mined_Blocks_Hash_Test, "/Users/ayoubessourni/Desktop/mydata_Mined_Blocks_Test.txt", sep="\t")
write.table( Mined_Blocks, "/Users/ayoubessourni/Desktop/mydata_Mined_Blocks.txt", sep="\t")
write.table( Estimated_Blocks, "/Users/ayoubessourni/Desktop/mydata_Estimated_Blocks.txt", sep="\t")
# Create the data for the chart.
mydata = read.csv("/Users/ayoubessourni/Documents/Waves_Forging_Algo/test.txt")
print(mydata[[1]][1])
mydata = read.csv("/Users/ayoubessourni/Documents/Waves_Forging_Algo/test.txt")
print(mydata[[1]][1])
mydata = read.csv("/Users/ayoubessourni/Documents/Waves_Forging_Algo/test.txt")
print(mydata[[1]][2])
mydata = read.csv("/Users/ayoubessourni/Documents/Waves_Forging_Algo/test.txt")
print(mydata[[2]][1])
mydata = read.csv("/Users/ayoubessourni/Documents/Waves_Forging_Algo/test.txt")
print(mydata[[2]][1])
typeof(mydata[[2]][1])
mydata = read.csv("/Users/ayoubessourni/Documents/Waves_Forging_Algo/test.txt")
print(mydata[[2]][1])
typeof(mydata[[2]][1])
print(mydata[[3]][1])
typeof(mydata[[3]][1])
mydata = read.csv("/Users/ayoubessourni/Documents/Waves_Forging_Algo/test.txt")
print(mydata[[2]][1])
typeof(mydata[[2]][1])
print(mydata[[3]][1])
typeof(mydata[[3]][1])
B<-mydata[order(mydata$col2),]
mydata = read.csv("/Users/ayoubessourni/Documents/Waves_Forging_Algo/test.txt")
print(mydata[[2]][1])
typeof(mydata[[2]][1])
print(mydata[[3]][1])
typeof(mydata[[3]][1])
mydata[order(mydata$col2),]
